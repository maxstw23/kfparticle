#include "KaonPID.h"
#include <cmath>

const float KaonPID::num_std = 3.5;
const float KaonPID::nSigma_mean[] = {0.5031165404097993, 0.42479458870861925, 0.5362826434489563, 0.5586887684217966, 0.6034580421720552, 0.6307321879931244, 0.6395669617420453, 0.6289544495911352, 0.6194171716765685, 0.6481858498311374, 0.7070066747041904, 0.7735216578452901, 0.8175057107767281};
const float KaonPID::nSigma_std[] = {0.9846324943720627, 1.033256588517254, 1.1295824879913325, 1.0164413482929866, 1.001982967606565, 0.9890484784065774, 0.9758806387722779, 0.9549880330846657, 0.9283210212890701, 0.9056468603748279, 0.8811072387113682, 0.7101742303261289, 0.555498817800008};
const float KaonPID::zTOF_mean[] = {0.0016278219550025525, -0.0005632962929035969, 0.0008327699703518331, -0.0006245538774682744, -0.0010381209202891101, -0.001391311987889237, -0.001450777248135622, -0.0014241539469616467, -0.0015728348608191392, -0.0021314757798261814, -0.0027524530075662777, -0.003160991402754089, -0.0036952246008489817};
const float KaonPID::zTOF_std[] = {0.020379324310423202, 0.014826893254680831, 0.02529479373409463, 0.012195679634098388, 0.011530041398646268, 0.01064546979291038, 0.009865121067419253, 0.009245869077916653, 0.008825703100071991, 0.008746966000151818, 0.008729066150310013, 0.008181605161293884, 0.005861396144196574};

bool KaonPID::IsKaon()
{
    int pTbin = static_cast<int>(floor(pT / 0.2));
    if (pTbin < 1 || pTbin > 13) return false;

    // rectangular 2D cut
    if (zTOF > zTOF_mean[pTbin-1] + num_std * zTOF_std[pTbin-1] || zTOF < zTOF_mean[pTbin-1] - num_std * zTOF_std[pTbin-1]) return false;
    if (nSigma > nSigma_mean[pTbin-1] + num_std * nSigma_std[pTbin-1] || nSigma < nSigma_mean[pTbin-1] - num_std * nSigma_std[pTbin-1]) return false;

    // decision boundary cut
    float x = nSigma;
    if (pTbin == 2)
    {
        if (zTOF < -0.00740428142528834*x - 0.309396675573395*sqrt(4.89619390913469e-5*x*x - 0.0608378198738696*x + 1) + 0.237735090905258) return false;
    }
    if (pTbin == 3)
    {
        if (zTOF < -0.0281648248295252*x - 0.962886729723417*sqrt(0.000443038401028118*x*x - 0.0733453661219122*x + 1) + 0.900787586767528) return false;
    } 
    if (pTbin == 4)
    {
        if (zTOF > -0.0032406934598125*x + 0.13698443471894*sqrt(0.00280927391482182*x*x + 0.00221847237193595*x + 1) - 0.0716263807099521) return false;
        if (zTOF < -0.00336998016087225*x - 0.068836431881989*sqrt(-0.00207507565876224*x*x - 0.209026087342191*x + 1) + 0.036153467837767) return false;
    }
    if (pTbin == 5)
    {
        if (zTOF > -0.00213967993133456*x + 0.0676440825750894*sqrt(0.00250094845330029*x*x - 0.00751326905926489*x + 1) - 0.0243909416305087) return false;
        if (zTOF < -0.0038428148130518*x - 0.0747002505703554*sqrt(-0.000587438544893784*x*x - 0.207476923610012*x + 1) + 0.0460501491083069) return false;
    }
    if (pTbin == 6)
    {
        if (zTOF > -0.00175411118868176*x + 0.045714123736958*sqrt(0.000712016627218395*x*x + 0.0104467802787154*x + 1) - 0.0156521506962398) return false;
        if (zTOF < -0.00388033959336782*x - 0.0748278805316802*sqrt(0.000117474696868625*x*x - 0.213332869998102*x + 1) + 0.0499585395905155) return false;
    }
    if (pTbin == 7)
    {
        if (zTOF > -0.00135823151446061*x + 0.0393009793559247*sqrt(-8.1076042377777e-6*x*x + 0.0375948173484308*x + 1) - 0.0158373005570447) return false;
        if (zTOF < -0.00311068719528727*x - 0.0700715902989559*sqrt(-0.000765659313779474*x*x - 0.217735809837499*x + 1) + 0.0482913994238915) return false;
    }
    if (pTbin == 8)
    {
        if (zTOF > -0.000810505839619179*x + 0.035206338530538*sqrt(-0.00195961733178985*x*x + 0.0541320905456119*x + 1) - 0.0164687958929413) return false;
        if (zTOF < -0.00191783901912651*x - 0.0639157056402445*sqrt(-0.00304299323779905*x*x - 0.221235277690126*x + 1) + 0.0443158469801602) return false;
    }
    if (pTbin == 9)
    {
        if (zTOF > -0.000406519374536317*x + 0.0325315274896498*sqrt(-0.00397166241302228*x*x + 0.0691104563603377*x + 1) - 0.0174909352483898) return false;
        if (zTOF < -0.00117710333749502*x - 0.0625692793323821*sqrt(-0.0050827902323328*x*x - 0.224972761172321*x + 1) + 0.0440215077317855) return false;
    }
    if (pTbin == 10)
    {
        if (zTOF > -0.000641677937167733*x + 0.0329797605420023*sqrt(-0.00220695223387111*x*x + 0.104659981398042*x + 1) - 0.0205892248384706) return false;
        if (zTOF < -0.00292830827141557*x - 0.083739039155731*sqrt(-0.00215051665817975*x*x - 0.226925786617247*x + 1) + 0.0644503524452624) return false;
    }
    if (pTbin == 11)
    {
        if (zTOF > -0.00137784830844077*x + 0.035638687372475*sqrt(0.00294264136383392*x*x + 0.157384594506829*x + 1) - 0.0252045806382778) return false;
        if (zTOF < -0.0150274260629011*x - 0.198569461690679*sqrt(0.00544366373304271*x*x - 0.225075543335691*x + 1) + 0.177409826671311) return false;
    }
    if (pTbin == 12)
    {
        if (zTOF > -0.00566941809163731*x + 0.0458519456335069*sqrt(0.00790935845244771*x*x + 0.3230342971309*x + 1) - 0.0356139852636468) return false;
        if (zTOF < 0.0248326337918246*x + 0.119539504385017*sqrt(0.0506554349229539*x*x - 0.305847993126399*x + 1) - 0.14284515326791) return false;
    }
    if (pTbin == 13)
    {
        if (zTOF > -0.00531080931414015*x + 0.0262419206001528*sqrt(-0.00839055140322048*x*x + 0.60896295699047*x + 1) - 0.0191979388639507) return false;
        if (zTOF < -0.016548430140058*x - 0.0702206203108405*sqrt(0.0181691525107892*x*x - 0.533465865459766*x + 1) + 0.0527554962191577) return false;
    }

    return true;
}

bool KaonPID::IsKaonSimple(float nSigmaCut)
{
    int pTbin = static_cast<int>(floor(pT / 0.2));
    if (pTbin < 1 || pTbin > 13) return false;

    // loose nSigma cut
    if (fabs(nSigma-nSigma_mean[pTbin-1]) < nSigmaCut) return false;
}