#include "Efficiency.h"
#include <string>
#include <cmath>

const float Efficiency::P0_pip[] = {0.886889, 0.885008, 0.881132, 0.876185, 0.868628, 0.858318, 0.846408, 0.837419, 0.821418};
const float Efficiency::P1_pip[] = {0.124338, 0.150681, 0.134242, 0.134970, 0.125251, 0.131528, 0.140759, 0.132517, 0.123864};
const float Efficiency::P2_pip[] = {3.975687, 5.889761, 4.832090, 4.674207, 4.520716, 4.824098, 5.689079, 4.909895, 4.838506};
const float Efficiency::P3_pip[] = {-0.032898, -0.036196, -0.033049, -0.028674, -0.023753, -0.019097, -0.013313, -0.013192, -0.006701};
const float Efficiency::P4_pip[] = {0.007812, 0.009328, 0.008458, 0.007336, 0.006179, 0.005370, 0.004243, 0.004477, 0.003309};

const float Efficiency::P0_pim[] = {0.887946, 0.891859, 0.884930, 0.879530, 0.878718, 0.862815, 0.851612, 0.842267, 0.832014};
const float Efficiency::P1_pim[] = {0.131983, 0.133859, 0.134496, 0.133482, 0.131704, 0.137290, 0.139476, 0.145573, 0.143478};
const float Efficiency::P2_pim[] = {4.563985, 4.614249, 4.715607, 4.746398, 4.394572, 5.328317, 5.490180, 6.153110, 5.850654};
const float Efficiency::P3_pim[] = {-0.036613, -0.040780, -0.035005, -0.033828, -0.035898, -0.025471, -0.017172, -0.018589, -0.015180};
const float Efficiency::P4_pim[] = {0.008989, 0.010193, 0.008983, 0.008884, 0.009415, 0.007156, 0.005004, 0.005613, 0.005154};

const float Efficiency::P0_Kp[] = {0.690142, 0.676011, 0.718507, 0.703901, 0.693780, 0.683789, 0.690641, 0.675547, 0.650985};
const float Efficiency::P1_Kp[] = {0.189839, 0.183987, 0.183249, 0.186167, 0.184005, 0.185017, 0.193030, 0.196310, 0.194684};
const float Efficiency::P2_Kp[] = {2.223277, 2.165908, 1.860896, 1.884475, 1.913019, 1.950626, 1.952273, 1.999499, 2.117694};
const float Efficiency::P3_Kp[] = {0.065514, 0.080305, 0.043430, 0.055333, 0.059782, 0.063471, 0.050318, 0.054902, 0.069219};
const float Efficiency::P4_Kp[] = {-0.007674, -0.011164, -0.003070, -0.006041, -0.006827, -0.007443, -0.004751, -0.005285, -0.008408};

const float Efficiency::P0_Km[] = {0.703641, 0.709428, 0.686461, 0.681716, 0.669369, 0.687338, 0.657899, 0.666045, 0.630215};
const float Efficiency::P1_Km[] = {0.191055, 0.188527, 0.191945, 0.196493, 0.191428, 0.196505, 0.196064, 0.194928, 0.197548};
const float Efficiency::P2_Km[] = {2.005314, 1.897479, 2.100059, 2.079951, 2.098088, 1.999695, 2.106356, 1.950680, 2.301384};
const float Efficiency::P3_Km[] = {0.054601, 0.051999, 0.066411, 0.068658, 0.078267, 0.056107, 0.075667, 0.065373, 0.080633};
const float Efficiency::P4_Km[] = {-0.005512, -0.005261, -0.007941, -0.008244, -0.010746, -0.005605, -0.009692, -0.008158, -0.010090};

const float Efficiency::P0_P[] = {0.959951, 0.959438, 0.954143, 0.952008, 0.946746, 0.940677, 0.932019, 0.916456, 0.903813};
const float Efficiency::P1_P[] = {0.192575, 0.192095, 0.194261, 0.191835, 0.194171, 0.196558, 0.193296, 0.195834, 0.196138};
const float Efficiency::P2_P[] = {3.840248, 3.817065, 3.909977, 3.838980, 3.961920, 4.056762, 3.873240, 4.142844, 4.095099};
const float Efficiency::P3_P[] = {-0.081442, -0.079240, -0.073649, -0.078484, -0.074979, -0.073877, -0.070439, -0.062726, -0.057490};
const float Efficiency::P4_P[] = {0.016587, 0.015858, 0.014178, 0.015887, 0.014976, 0.014723, 0.013821, 0.011836, 0.010693};

const float Efficiency::P0_AP[] = {0.883145, 0.878330, 0.873420, 0.869419, 0.874249, 0.867823, 0.855251, 0.838890, 0.841782};
const float Efficiency::P1_AP[] = {0.192781, 0.194055, 0.195832, 0.193653, 0.191070, 0.193205, 0.194849, 0.195505, 0.194509};
const float Efficiency::P2_AP[] = {3.736825, 3.945047, 4.032132, 3.864968, 3.642243, 3.662348, 3.930844, 4.033912, 3.867359};
const float Efficiency::P3_AP[] = {-0.032071, -0.025909, -0.022816, -0.020748, -0.029114, -0.023971, -0.021059, -0.010758, -0.019227};
const float Efficiency::P4_AP[] = {0.007449, 0.006048, 0.005148, 0.004747, 0.006889, 0.005188, 0.005026, 0.002255, 0.004029};

const float Efficiency::P0_Kp_2D[] = {0.656673, 0.651768, 0.647041, 0.659321, 0.646929, 0.637643, 0.645916, 0.624893, 0.604222};
const float Efficiency::P1_Kp_2D[] = {0.143461, 0.136486, 0.132301, 0.140275, 0.13774, 0.138923, 0.146108, 0.152787, 0.152349};
const float Efficiency::P2_Kp_2D[] = {1.75571, 1.6679, 1.61186, 1.54363, 1.59639, 1.61874, 1.60391, 1.70599, 1.80471};
const float Efficiency::P3_Kp_2D[] = {0.14417, 0.150836, 0.156056, 0.145075, 0.150114, 0.153802, 0.141166, 0.149843, 0.162156};
const float Efficiency::P4_Kp_2D[] = {-0.0283527, -0.0297447, -0.0310676, -0.0289775, -0.0296311, -0.0304348, -0.0278383, -0.0293249, -0.0320393};
const float Efficiency::P5_Kp_2D[] = {1.10086, 1.09584, 1.10236, 1.09607, 1.09355, 1.09028, 1.08435, 1.08404, 1.0822};
const float Efficiency::P6_Kp_2D[] = {4.59476, 4.66841, 4.58455, 4.72552, 4.71154, 4.82421, 4.93087, 4.80386, 4.75507};
const float Efficiency::P0_Km_2D[] = {0.654812, 0.669162, 0.646511, 0.645435, 0.626828, 0.643098, 0.6192, 0.632903, 0.584627};
const float Efficiency::P1_Km_2D[] = {0.150512, 0.144169, 0.146853, 0.153886, 0.151368, 0.152935, 0.152321, 0.148042, 0.155633};
const float Efficiency::P2_Km_2D[] = {1.73642, 1.54927, 1.69996, 1.68169, 1.78667, 1.63821, 1.72796, 1.53378, 1.9663};
const float Efficiency::P3_Km_2D[] = {0.144394, 0.137028, 0.152111, 0.153102, 0.161691, 0.147432, 0.15978, 0.148994, 0.170449};
const float Efficiency::P4_Km_2D[] = {-0.0282313, -0.027081, -0.030181, -0.0303341, -0.0319985, -0.0291948, -0.0312043, -0.0299695, -0.0329565};
const float Efficiency::P5_Km_2D[] = {1.11151, 1.10048, 1.09567, 1.10665, 1.08959, 1.08616, 1.08686, 1.07772, 1.08155};
const float Efficiency::P6_Km_2D[] = {4.40872, 4.62938, 4.71322, 4.40107, 4.94297, 4.95828, 4.91221, 4.87859, 4.82713};

// functions
float Efficiency::GetEfficiency1D(float pT, int cent, std::string particle)
{
    if (particle == "pip")
        return (P0_pip[cent-1] + P3_pip[cent-1]*pT + P4_pip[cent-1]*pT*pT) * exp(-pow(P1_pip[cent-1]/pT,P2_pip[cent-1]));
    else if (particle == "pim")
        return (P0_pim[cent-1] + P3_pim[cent-1]*pT + P4_pim[cent-1]*pT*pT) * exp(-pow(P1_pim[cent-1]/pT,P2_pim[cent-1]));
    else if (particle == "Kp")
        return (P0_Kp[cent-1] + P3_Kp[cent-1]*pT + P4_Kp[cent-1]*pT*pT) * exp(-pow(P1_Kp[cent-1]/pT,P2_Kp[cent-1]));
    else if (particle == "Km")
        return (P0_Km[cent-1] + P3_Km[cent-1]*pT + P4_Km[cent-1]*pT*pT) * exp(-pow(P1_Km[cent-1]/pT,P2_Km[cent-1]));
    else if (particle == "P")
        return (P0_P[cent-1] + P3_P[cent-1]*pT + P4_P[cent-1]*pT*pT) * exp(-pow(P1_P[cent-1]/pT,P2_P[cent-1]));
    else if (particle == "AP")
        return (P0_AP[cent-1] + P3_AP[cent-1]*pT + P4_AP[cent-1]*pT*pT) * exp(-pow(P1_AP[cent-1]/pT,P2_AP[cent-1]));
    else
        return 0;
}

float Efficiency::GetEfficiency2D(float pT, float eta, int cent, std::string particle) // only for kplus and kminus
{
    if (particle == "Kp")
        return (P0_Kp_2D[cent-1] + P3_Kp_2D[cent-1]*pT + P4_Kp_2D[cent-1]*pT*pT) * exp(-pow(P1_Kp_2D[cent-1]/pT,P2_Kp_2D[cent-1])) * exp(-pow(pow(eta/P5_Kp_2D[cent-1],2),P6_Kp_2D[cent-1]));
    else if (particle == "Km")
        return (P0_Km_2D[cent-1] + P3_Km_2D[cent-1]*pT + P4_Km_2D[cent-1]*pT*pT) * exp(-pow(P1_Km_2D[cent-1]/pT,P2_Km_2D[cent-1])) * exp(-pow(pow(eta/P5_Km_2D[cent-1],2),P6_Km_2D[cent-1]));
    else
        return 0;
}